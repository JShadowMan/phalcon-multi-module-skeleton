<?php
/**
 * This file is part of phalcon-skeleton
 *
 * @copyright Copyright (C) 2020 Jayson Wang
 * @license   MIT License
 * @link      https://github.com/lsalio/phalcon-skeleton
 */
namespace App\Library\Config;

use League\Flysystem\Filesystem;
use Phalcon\Config;


/**
 * Class Factory
 * @package App\Libraries\Config
 */
class Factory {

    /**
     * Create configure object
     *
     * @param array $configs
     * @param string $base
     * @return Config
     */
    public static function create(array $configs = [], string $base = ''): Config {
        $config = new Config();
        $filename = str_replace(['\\', '/', ':'], '_', $base);
        if (empty($filename)) {
            $filename = 'global';
        }
        $basedir = cache_path(env('STORAGE_CACHE_CONFIG_PATH', 'config'));

        /* @var $filesystem Filesystem */
        $filesystem = container('filesystem', $basedir);
        if ($filesystem->has("{$filename}.php") && !environment('development')) {
            return static::merge($config, $basedir . "/{$filename}.php");
        }

        foreach ($configs as $cfg) {
            static::merge($config, config_path("{$cfg}.php"), ($cfg === 'config' ? null : $cfg));
        }

        static::dump($filesystem, "{$filename}.php", $config->toArray());
        return $config;
    }

    /**
     * Merge other configure to main object
     *
     * @param Config $config
     * @param string $path
     * @param string|null $mount
     * @return Config
     */
    private static function merge(Config $config, string $path, ?string $mount = null): Config {
        /** @noinspection PhpIncludeInspection */
        $value = include $path;
        if (is_array($value)) {
            $value = new Config($value);
        }

        if ($value instanceof Config) {
            if (!$mount) {
                return $config->merge($value);
            }
            $config[$mount] = (new Config())->merge($value);
        }
        return $config;
    }

    /**
     * Dump the configure to cache file
     *
     * @param Filesystem $filesystem
     * @param string $file
     * @param array $data
     */
    private static function dump(Filesystem $filesystem, string $file, array $data): void {
        $contents = '<?php' . PHP_EOL
            . '/* !! PLEASE DO NOT EDIT THIS FILE DIRECTLY !! */' . PHP_EOL
            . 'return ' . var_export($data, true) . ';' . PHP_EOL;
        $filesystem->put($file, $contents, $data);
    }

}
